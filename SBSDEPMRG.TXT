     /****************************************************************/
     /*  PROGRAM NAME: SBSDEPMRG                                     */
     /*  DESCRIPTION.: BRANCH MERGER PROG for SBS                    */
     /*  DATE CREATED: 10Sept2008                                    */
     /*  AUTHOR......: TMPDM2                                        */
     /****************************************************************/
     fsbsdep    uf   e             disk
     f                                     prefix(Z)
     flbsdep    uf A e             disk    rename(sbsdepr:lbsdepr)
     f                                     prefix(L)
     fsbsdrivrs uf   e             disk    prefix(a)
     flbsdrivrs uf A e             disk    rename(RSBSDRIVRS:lsbsdrivrs)
     f                                     prefix(m)
     fsbscolfac uf   e             disk    prefix(b)
     flbscolfac uf A e             disk    rename(SBSCOLFACR:LBSCOLFACR)
     f                                     prefix(k)
     fsbsimacmapif   e           k disk    prefix(x)
     fsbscycdt  if   e             disk    prefix(y)
     fsbsthrpt1 O    E             PRINTER
     dRundate          s               d   inz(*SYS)
     dRundate2         s               d
     daccnbr10         s             10
      *DEPCTR           s             10s 0 inz
      *
DMB  D ds_sbsdepr    E DS                  EXTNAME(sbsdep)
DMB  D*                                    INZ
DMB  D                                     prefix(Z)
DMB  D ds_lbsdepr    E DS                  EXTNAME(lbsdep)
DMB  D*                                    INZ
DMB  D                                     prefix(L)
      *
     D ds_RSBSDRIVRS E DS                  EXTNAME(SBSDRIVRS)
     D                                     INZ
     D                                     prefix(a)
     D ds_lsbsdrivrs E DS                  EXTNAME(LBSDRIVRS)
     D                                     INZ
     D                                     prefix(m)
      *
     D ds_SBSCOLFACR E DS                  EXTNAME(SBSCOLFAC)
     D                                     INZ
     D                                     prefix(b)
     D ds_LBSCOLFACR E DS                  EXTNAME(LBSCOLFAC)
     D                                     INZ
     D                                     prefix(k)
      *
     c                   dou       yLoadctry = 'TH'
     c                   read      sbscycdt
     c                   enddo
      * initialize counters
     c                   eval      DEPTOT = 0
     c                   eval      DRVTOT = 0
     c                   eval      COLTOT = 0
      *
     c                   eval      DEPCTR = 0
     c                   eval      DRVCTR = 0
     c                   eval      COLCTR = 0
     c                   eval      Rundate2 = Rundate
     /****************************************************************/
     /*  SBSDEP                                                      */
     /*                                                              */
     /****************************************************************/
     c                   read      sbsdep
     c                   dow       not %eof
     c                   eval      DEPTOT   = DEPTOT + 1
     c                   eval      accnbr10=%subst(Zaccnbr:1:10)
     c     accnbr10      chain     sbsimacmap
     c                   if        %found
     c                   if        ZLoadctry = 'TH'
     c                   if        xLoadctry = 'TH'
     c                             and     xSnapdt   = yCursnapdt
     c                             and     not %NULLIND(xNEWACC#)
     c                             and     not %NULLIND(xNEWACTID)
      *
DTE  c                   if        %NULLIND(ZFSTEXRCDT) = *ON
DTE  c                   eval      %NULLIND(LFSTEXRCDT) = *ON
DTE  c                   else
DTE  c                   eval      %NULLIND(LFSTEXRCDT) = *OFF
DTE  c                   endif
      *
     c                   if        %NULLIND(ZFLNOPNDT) = *ON
     c                   eval      %NULLIND(LFLNOPNDT) = *ON
     c                   else
     c                   eval      %NULLIND(LFLNOPNDT) = *OFF
     c                   endif
      *
DMB  c*                  movel     ds_sbsdepr    ds_lbsdepr
DMB  c                   eval      ds_lbsdepr = ds_sbsdepr
      *
DMB  c                   eval      LMRGLOADDT = Rundate
DMB  c                   eval      LMRGSNAPDT = yCursnapdt
DMB  c                   eval      LNEWACC# = xNEWACC#
DMB  c                   eval      LNEWACTID = xNEWACTID
      *
DMB  c                   write     lbsdepr
      *
DTE  c                   eval      %NULLIND(ZMRGLOADDT) = *OFF
DTE  c                   eval      %NULLIND(ZMRGSNAPDT) = *OFF
DMB  c                   eval      ZMRGLOADDT = Rundate
DMB  c                   eval      ZMRGSNAPDT = yCursnapdt
      *
dmb  c                   eval      ZACCNBR = xNEWACC#
dmb  c                   eval      ZDEPACCID = xNEWACTID
      *
dmb  c                   update    sbsdepr
     c                   eval      DEPCTR   = DEPCTR + 1
     c                   endif
     c                   endif
     c                   endif
     c                   read      sbsdep
     c                   enddo
     /****************************************************************/
     /*  SBSDRIVRS                                                   */
     /*                                                              */
     /****************************************************************/
     c                   read      sbsdrivrs
     c                   dow       not %eof
     c                   eval      DRVTOT   = DRVTOT + 1
     c                   eval      accnbr10=%subst(aACCNBR:1:10)
     c     accnbr10      chain     sbsimacmap
     c                   if        %found
     c                   if        aLoadctry = 'TH' and aLOADSRC = 'DDS'
     c                   if        xLoadctry = 'TH'
     c                             and     xSnapdt   = yCursnapdt
     c                             and     not %NULLIND(xNEWACC#)
     c                             and     not %NULLIND(xNEWACTID)
      *
DTE  c                   if        %NULLIND(aBLOCKCDDT) = *ON
DTE  c                   eval      %NULLIND(mBLOCKCDDT) = *ON
DTE  c                   else
DTE  c                   eval      %NULLIND(mBLOCKCDDT) = *OFF
DTE  c                   endif
DMB  c*                  movel     RSBSDRIVRS    lsbsdrivrs
DMB  c                   eval      ds_lsbsdrivrs = ds_RSBSDRIVRS
      *
DMB  c                   eval      mMRGLOADDT = Rundate
DMB  c                   eval      mMRGSNAPDT = yCursnapdt
DMB  c                   eval      mNEWACC# = xNEWACC#
DMB  c                   eval      mNEWACTID = xNEWACTID
      *
DMB  c                   write     lsbsdrivrs
      *
DTE  c                   eval      %NULLIND(aMRGLOADDT) = *OFF
DTE  c                   eval      %NULLIND(aMRGSNAPDT) = *OFF
DMB  c                   eval      aMRGLOADDT = Rundate
DMB  c                   eval      aMRGSNAPDT = yCursnapdt
     c                   eval      aACCNBR = xNEWACC#
     c                   eval      aACCID = xNEWACTID
      *
     c                   update    rsbsdrivrs
     c                   eval      DRVCTR   = DRVCTR + 1
     c                   endif
     c                   endif
     c                   endif
     c                   read      sbsdrivrs
     c                   enddo
     /****************************************************************/
     /*  SBSCOLFAC                                                   */
     /*                                                              */
     /****************************************************************/
     c                   read      sbscolfac
     c                   dow       not %eof
     c                   eval      COLTOT   = COLTOT + 1
     c                   eval      accnbr10=%subst(bACCSRCKEY:1:10)
     c     accnbr10      chain     sbsimacmap
     c                   if        %found
     c                   if        bLoadctry = 'TH'
     c                   if        xLoadctry = 'TH'
     c                             and     xSnapdt   = yCursnapdt
     c                             and     not %NULLIND(xNEWACC#)
     c                             and     not %NULLIND(xNEWACTID)
      *
DMB  c*                  movel     SBSCOLFACR    LBSCOLFACR
DMB  c                   eval      ds_LBSCOLFACR = ds_SBSCOLFACR
      *
DMB  c                   eval      kMRGLOADDT = Rundate
DMB  c                   eval      kMRGSNAPDT = yCursnapdt
DMB  c                   eval      kNEWACC# = xNEWACC#
DMB  c                   eval      kNEWACTID = xNEWACTID
      *
DMB  c                   write     LBSCOLFACR
      *
DTE  c                   eval      %NULLIND(bMRGLOADDT) = *OFF
DTE  c                   eval      %NULLIND(bMRGSNAPDT) = *OFF
DMB  c                   eval      bMRGLOADDT = Rundate
DMB  c                   eval      bMRGSNAPDT = yCursnapdt
     c                   eval      bACCSRCKEY    = xNEWACC#
     c                   eval      bACCID = xNEWACTID
      *
     c                   update    SBSCOLFACR
     c                   eval      COLCTR   = COLCTR + 1
     c                   endif
     c                   endif
     c                   endif
     c                   read      sbscolfac
     c                   enddo
      *
     /****************************************************************/
     c                   eval      SBSTHF1   =  'JOB completed SBSDEPMRG for '+
     c                             'SBSCYCDT = ' +
     c                             yLoadctry + ' / ' +  %char(yCursnapdt)
     c                   write     HEADER1
      *
     c                   eval      *inlr = *on
